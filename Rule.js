class Rule {
  constructor(r) {
    this.isRamdom = r;
    this.partner;
  }
}

let R_makeLine_xy = [
  [0, 2, 0.5, 0, 0, "A", "A", 1.5, 1, 0],
  [0, 2, "A", 0, 0, "A", 1.5, 0, 1, -1],
  [0, 2, 1, 0, 0, "A", 0, 0, 1, -1],
  [1, 2, 1, 0, 0, 1.5, "A", "A", 1, 0],
  [1, 1, 1, 0, 0, 0, "A", 1.5, 1, 0],
  [6, 2, "A", 0, 0, 1.5, 1.5, 1, 1, -1],
  [6, 1, "A", 0, 0, 0, "A", 1, 1, -1],
];

let R_maketriangle_xy = [
  [0, 2, 2, 0, 0, 0, 0, 0, 1, -1],
  [0, 2, 2, "A", "A", 1, 1, 0, 1, -1],
  [6, 2, 1, "A", "A", 1, 1, 1, 1, -1],
  [6, 2, 1, "A", "A", 0, 0, 1, 1, -1],
  [6, 1, 0, 0, 0, "A", "A", 1, 1, -1],
  [0, 2, 0, 0, 2, 1, 1, 0, 0, -1],
  [3, 2, "A", 1, 1, 1, "A", "A", -1, 1],
  [0, 2, 1, 2, 2, 1, 1, 1, 0, -1],
  [0, 2, 0, 0, 0, 1, 1, 0, -1, 0],
  [0, 2, 1, 2, 0, 1, 1, 1, -1, 0],
  [1, 1, 1, "A", "A", 0, 0, 1, 1, 0],
  [1, 1, 1, "A", "A", 1, 1, 1, 1, 0],
  [2, 2, "A", 1, 2, "A", "A", "A", 0, 1],
  [0, 2, 0, 1, 1, "A", "A", 0, 1, 0],
  [0, 2, 0, 2, 2, "A", "A", 0, 1, 0],
  [0, 2, 1, "A", "A", "A", "A", 0, 1, 0],
  [1, 2, 1, "A", "A", "A", 0, 0, 1, 0],
  [1, 1, 1, "A", "A", 0, 0, 0, 1, 0],
  [3, 1, 0, 1, 1, "A", "A", "A", -1, 1],
];

let R_OSKB = [
  [0, 2, "A", "A", "A", "A", 2, 0, 1, -1],
  [0, 2, "A", "A", "A", "A", 0, 2, 0, -1],

  [0, 2, 2, 0, "A", 2, 0, 0, 0, 1],
  [0, 2, 1, "A", "A", "A", 0, 0, 1, 0],
  [5, 1, "A", 0, 0, 0.5, 1.5, 1, 1, -1],

  [2, 2, 2, 1, "A", 1.5, 0, 0, 0, 1],
  [1, 2, 1, "A", "A", "A", 0, 0, 1, 0],

  [1, 1, 1, "A", "A", 0, 0, 0, 1, 0],
  [0, 2, 2, 0, 0, 0, 2, 2, 0, 1],
  [0, 2, 2, 1, 0, 2, 0, 0, 0, 1],

  [2, 2, 2, 1, 0, 0, 1.5, 2, 0, 1],



  [1, 3, 1.5, "A", "A", "A", "A", "A", 1, 0],
  [2, 3, "A", 1.5, "A", "A", "A", "A", 0, 1],
  [3, 3, "A", "A", 1.5, "A", "A", "A", -1, 1],
  [4, 3, "A", "A", "A", 1.5, "A", "A", -1, 0],
  [5, 3, "A", "A", "A", "A", 1.5, "A", 0, -1],
  [6, 3, "A", "A", "A", "A", "A", 1.5, 1, -1],
];

let R_LEP_2hop = [
  //隣接ペアボット数=1
  [0, 2, 2, 0.5, 0.5, 0.5, 0.5, 0.5, -1, 0],
  [0, 2, 0.5, 2, 0.5, 0.5, 0.5, 0.5, 0, -1],
  [0, 2, 0.5, 0.5, 2, 0.5, 0.5, 0.5, 1, -1],
  [0, 2, 0.5, 0.5, 0.5, 2, 0.5, 0.5, 1, 0],
  [0, 2, 0.5, 0.5, 0.5, 0.5, 2, 0.5, 0, 1],
  [0, 2, 0.5, 0.5, 0.5, 0.5, 0.5, 2, -1, 1],
  //2
  [0, 2, 2, 2, 0.5, 0.5, 0.5, 0.5, [-1, 0], [0, -1]],
  [0, 2, 0.5, 2, 2, 0.5, 0.5, 0.5, [0, -1], [1, -1]],
  [0, 2, 0.5, 0.5, 2, 2, 0.5, 0.5, [1, -1], [1, 0]],
  [0, 2, 0.5, 0.5, 0.5, 2, 2, 0.5, [0, 1], [0, 1]],
  [0, 2, 0.5, 0.5, 0.5, 0.5, 2, 2, [-1, 1], [0, 1]],
  [0, 2, 2, 0.5, 0.5, 0.5, 0.5, 2, [-1, 0], [-1, 1]],
  //3
  [0, 2, 2, 2, 2, 0.5, 0.5, 0.5, 0, -1],
  [0, 2, 0.5, 2, 2, 2, 0.5, 0.5, 1, -1],
  [0, 2, 0.5, 0.5, 2, 2, 2, 0.5, 1, 0],
  [0, 2, 0.5, 0.5, 0.5, 2, 2, 2, 0, 1],
  [0, 2, 2, 0.5, 0.5, 0.5, 2, 2, -1, 1],
  [0, 2, 2, 2, 0.5, 0.5, 0.5, 2, -1, 0],
];

let R_LEP_xy_polygon = [
  //rule1
  [0, 2, 2, 0, 0, 0, 0, 0, 1, 0], //1
  [0, 2, 0, 0, 2, 0, 0, 0, -1, 1], //1
  [0, 2, "OD", 2, "OD", 0, 0, 0, 0, 1], //2
  [0, 2, 2, 0, 2, 0, 0, 0, -1, 1], //2

  //tule2
  [0, "3>=", 2, 0, 0, "3<=", "3<=", "3<=", 1, 0],
  [0, "3>=", "OD", 2, "OD", "3<=", "3<=", "3<=", 0, 1],
  [0, "3>=", 0, 0, 2, "3<=", "3<=", "3<=", -1, 1],
  [0, "3>=", 2, 0, 2, "3<=", "3<=", "3<=", -1, 1], // warning

  // rule2'
  // [0, 2, 1, 2, "OD", "3<=", "3<=", "3<=", 0, -1],
  // [0, 2, 1, 0, 2, "3<=", "3<=", "3<=", 0, -1],

  // [0, 2, 2, 0, 1, "3<=", "3<=", "3<=", 1, 0],
  // [0, 2, 0, 2, 1, "3<=", "3<=", "3<=", 0, 1],
  // [0, 2, 0, 0, 1, "3<=", "3<=", "3<=", 0, 0],

  //rule3
  [0, 3, 1, 0, 0, 0, 0, 0, 0, 0],
  [0, 3, 0, 1, 0, 0, 0, 0, 0, 0],
  [0, 3, 0, 0, 1, 0, 0, 0, 0, 0],
  [0, 3, 0, 0, 0, 1, 0, 0, 0, 0],
  [0, 3, 0, 0, 0, 0, 1, 0, 0, 0],
  [0, 3, 0, 0, 0, 0, 0, 1, 0, 0],

  //rule x
  // [0, 3, 0, 0, 0, "A", 1, 0, 0, 0],
  // [0, 3, 0, 0, 0, "A", 1, "2>=", 0, 0],

  [0, 2, 1, "A", "A", "A", "A", "A", 0, -1],
  [0, 2, "A", 1, "A", "A", "A", "A", 0, -1],
  [0, 2, "A", "A", 1, "A", "A", "A", 0, -1],
  [0, 2, "A", "A", "A", 1, "A", "A", 0, -1],
  [0, 2, "A", "A", "A", "A", 1, "A", 0, -1],
  [0, 2, "A", "A", "A", "A", "A", 1, 0, -1],

  //rule4
  [0, 2.5, "3>=", "A", "A", "A", "A", "A", 0, -1],
  [0, 2.5, "A", "3>=", "A", "A", "A", "A", 0, -1],
  [0, 2.5, "A", "A", "3>=", "A", "A", "A", 0, -1],
  // [0, 3, "3>=", "A", "A", "A", "A", "A", -1, 0],
  // [0, 3, "A", "3>=", "A", "A", "A", "A", 0, -1],
  // [0, 3, "A", "A", "3>=", "A", "A", "A", 1, -1],
];

let R_LEP_x = [
  //rule1
  [0, 2, 0, 2, "A", "A", "A", 2, 1, 0],
  //rule4
  [0, 2, 1, "A", "A", "A", "A", "A", 1, 0],
  //rule6
  [0, 2, 0, 1, 0, "A", "A", "A", 1, 0],
  [0, 2, 0, "A", "A", "A", 0, 1, 1, 0],
  //rule2
  [1, 1, 1, "A", 0, 0, 1.5, 1.5, 1, 0],
  [1, 1, 1, 1.5, 1.5, 0, 0, "A", 1, 0],
  //rule3
  [1, 1, 1, "A", 0, 0, 0, "A", 1, 0],
  //rule5
  [1, 1, 1, 1.5, 1.5, 0, 1.5, 1.5, 1, 0],
  //rule5
  [1, 2, 1, "A", "A", "A", "A", "A", 1, 0],
];

let R_LEP_x_polygon = [
  [0, 2, 2, 1, "A", "A", "A", 1, [1, -1], [0, 1]],

  // [0, 2, 2, 0, 0, "A", 2, 0, 1, -1],
  // [0, 2, 2, 0, 2, "A", 0, 0, 0, 1],
  //ミツマタは動かない
  [0, 2, 2, 0, 2, 0, 2, 0, 0, 0],

  [0, 2, 2, "OD", "OD", "OD", 2, 0, 1, -1],
  [0, 2, 2, 0, 2, "OD", "OD", "OD", 0, 1],

  //強重複検知ver
  //分岐のやつ、乗っかられたので戻ります
  // [3, 2, "A", "A", 2, 1, 1, "A", -1, 1],
  // [5, 2, "A", "A", 1, 1, 2, "A", 0, -1],

  //両方乗っかられたら戻る→進む
  // [3, 2, "A", "A", 2, "A", "A", "A", -1, 1],
  // [4, 2, "A", "A", "A", 2, "A", "A", -1, 0],
  // [5, 2, "A", "A", "A", "A", 2, "A", 0, -1],
  [2, 2, "A", 2, "A", "A", "A", "A", 0, 1],
  [6, 2, "A", "A", "A", "A", "A", 2, 1, -1],

  //3つなったらペアのところに戻る
  [1, 3, 1.5, "A", "A", "A", "A", "A", 1, 0],
  [2, 3, "A", 1.5, "A", "A", "A", "A", 0, 1],
  [3, 3, "A", "A", 1.5, "A", "A", "A", -1, 1],
  [4, 3, "A", "A", "A", 1.5, "A", "A", -1, 0],
  [5, 3, "A", "A", "A", "A", 1.5, "A", 0, -1],
  [6, 3, "A", "A", "A", "A", "A", 1.5, 1, -1],

  //ペアの方向に戻る

  [2, 1, 2, 1, 2, "A", "A", "A", 0, 1],
  [6, 1, 2, "A", "A", "A", 2, 1, 1, -1],

  [5, 1, "A", "A", "A", 2, 1, 0.5, 0, -1],
  [5, 1, "A", "A", "A", 0.5, 1, 2, 0, -1],
  [5, 1, "A", "A", "A", 0.5, 1, 0.5, 0, -1],

  [3, 1, "A", 0.5, 1, 2, "A", "A", -1, 1], //17
  [3, 1, "A", 2, 1, 0.5, "A", "A", -1, 1],
  [3, 1, "A", 0.5, 1, 0.5, "A", "A", -1, 1],

  // //0.5 -> 1
  // [5, 1, "A", "A", "A", 2, 1, 1, 0, -1],
  // [5, 1, "A", "A", "A", 1, 1, 2, 0, -1],
  // [5, 1, "A", "A", "A", 1, 1, 1, 0, -1],

  // [3, 1, "A", 1, 1, 2, "A", "A", -1, 1],
  // [3, 1, "A", 2, 1, 1, "A", "A", -1, 1],
  // [3, 1, "A", 1, 1, 1, "A", "A", -1, 1],

  // //3
  // [0, 2, 0, 0, 2, 0, 0, 0, 0, 1],
  // [0, 2, 0, 0, 0, 0, 2, 0, 1, -1],

  // //4
  // [2, 1, 0, 1, 2, 0, 0, 0, 0, 1],
  // [6, 1, 0, 0, 0, 0, 2, 1, 1, -1],
  // //滑り落ち・上り-----------------------
  // [0, 2, 0, 0, 2, 2, 0, 0, 0, 1],
  // [0, 2, 0, 0, 0, 2, 2, 0, 1, -1],

  // [2, 1, 0, 1, 2, 2, "A", 0, 0, 1],
  // [6, 1, 0, 0, "A", 2, 2, 1, 1, -1],//27
  // //------------------------------------
];

let R_makeLine_x = [
  //分岐の中心のロボ
  [0, 2, 2, 1, "A", "A", "A", 1, [1, -1], [0, 1]],
  //1
  [0, 2, 2, 0, 0, "A", 2, 0, 1, -1],
  [0, 2, 2, 0, 2, "A", 0, 0, 0, 1],

  //2
  [6, 1, 1.5, 0, "A", "A", 2, 1, 1, -1],
  [2, 1, 1.5, 1, 2, "A", "A", 0, 0, 1],

  // [6, 1, 2, 0, 0.5, "A", 2, 1, 1, -1],
  // [2, 1, 2, 1, 2, "A", 0.5, 0, 0, 1],

  //3
  [0, 2, 0, 0, 2, 0, 0, 0, 0, 1],
  [0, 2, 0, 0, 0, 0, 2, 0, 1, -1],

  //4
  [2, 1, 0, 1, 2, 0, 0, 0, 0, 1],
  [6, 1, 0, 0, 0, 0, 2, 1, 1, -1],

  //5
  [0, 2, 0, 0, 0, 0, 0, 2, 1, 0],
  [0, 2, 0, 2, 0, 0, 0, 0, 1, 0],

  //6
  [1, 1, 1, 0, 0, 0, 0, 2, 1, 0],
  [1, 1, 1, 2, 0, 0, 0, 0, 1, 0],

  //7remake
  // [0, 2, 0, 0, 0, "A", 1.5, 2, 1, 0],
  // [0, 2, 0, 2, 1.5, "A", 0, 0, 1, 0],

  //7remake 1.5 → 2
  [0, 2, 0, 0, 0, "OD", 2, 2, 1, 0],
  [0, 2, 0, 2, 2, "OD", 0, 0, 1, 0],

  //8  original 2 → remake 1.5
  [1, 1, 1, 0, 0, "A", 1.5, 2, 1, 0],
  [1, 1, 1, 2, 1.5, "A", 0, 0, 1, 0],

  //9remake
  [5, 2, "A", "A", 0, 1, 1, "A", 0, -1],
  [3, 2, "A", "A", 1, 1, 0, "A", -1, 1],

  // //★
  // [1, 1, 1, 0, 2, 2, 2, 2, 1, 0],
  // [1, 1, 1, 2, 2, 2, 2, 0, 1, 0],
  // //★+a
  // [1, 1, 1, 2, 2, 2, 2, 2, 1, 0],
  //
  //滑り落ち・上り-----------------------
  [0, 2, 0, 0, 2, 2, 0, 0, 0, 1],
  [0, 2, 0, 0, 0, 2, 2, 0, 1, -1],

  [2, 1, 0, 1, 2, 2, "A", 0, 0, 1],
  [6, 1, 0, 0, "A", 2, 2, 1, 1, -1],
  //------------------------------------

  [3, 2, "A", "A", 2, "A", "A", "A", -1, 1],
  [4, 2, "A", "A", "A", 2, "A", "A", -1, 0],
  [5, 2, "A", "A", "A", "A", 2, "A", 0, -1],

  //test1
  [3, 2, "A", "A", 2, 1, 1, "A", -1, 1],
  [5, 2, "A", "A", 1, 1, 2, "A", 0, -1],
  //test2
  //[5, 3, "A", "A", "A", "A", 1, "A", 0, -1],
  //test3 改  右2→1.5 このルール危険すぎる
  [2, 1, 1.5, 1, "A", "A", "A", "A", 0, 1],
  [6, 1, 1.5, "A", "A", "A", "A", 1, 1, -1],
  //test4
  // [5, 1, 3, "A", "A", "A", 1, 1, 0, -1],
  //test5
  [4, 2, 0, 0, 0, 2, 1, 2, -1, 0],
  //test6
  [0, 2, "A", 1, 1, 2, 1, 1, -1, 0],
  [0, 2, "A", 0, 1, 2, 1, 1, -1, 0],
  [0, 2, "A", 1, 1, 2, 1, 0, -1, 0],
  //test7
  [5, 1, 2, "A", "A", "A", 2, 1, 0, -1],
  [3, 1, 2, 1, 2, "A", "A", "A", -1, 1],
  //test7.5
  [5, 2, 1, "A", "A", "A", 2, 1, 0, -1],
  [3, 2, 1, 1, 2, "A", "A", "A", -1, 1],
  // //test8,2+
  [1, 3, 1.5, "A", "A", "A", "A", "A", 1, 0],
  [2, 3, "A", 1.5, "A", "A", "A", "A", 0, 1],
  [3, 3, "A", "A", 1.5, "A", "A", "A", -1, 1],
  [4, 3, "A", "A", "A", 1.5, "A", "A", -1, 0],
  [5, 3, "A", "A", "A", "A", 1.5, "A", 0, -1],
  [6, 3, "A", "A", "A", "A", "A", 1.5, 1, -1],
];
//[相方の位置,{surround},{nextGo}] // length = 10

//   3 2
//  4 0 1
//   5 6

// ロボットがN台：N
// ロボットが1or0：0.5
// ロボットが1or2台：1.5
// ロボットが0or2台："OD"
//ロボットが2台以下："2<=" , "3<="
//ロボットが3台以上："3>="
// ロボットがany台：'A'
// nextGOのみ
